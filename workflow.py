#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI Workflow Orchestrator - –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞

–ó–∞–ø—É—Å–∫: python3 workflow.py
"""

import json
import subprocess
import sys
import time
from datetime import datetime


def print_header(text):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "=" * 60)
    print(f"  {text}")
    print("=" * 60 + "\n")


def print_step(step_num, total_steps, description):
    """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
    print(f"üìç –®–ê–ì {step_num}/{total_steps}: {description}")
    print("-" * 60)


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['business_info', 'parser_settings', 'content_plan_settings']
        for field in required_fields:
            if field not in config:
                print(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è '{field}' –≤ config.json")
                sys.exit(1)

        return config

    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ config.json –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ config.json: {e}")
        sys.exit(1)


def extract_queries_from_competitors(competitors):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ URL –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤

    Args:
        competitors: –°–ø–∏—Å–æ–∫ URL –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤

    Returns:
        list: –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    import urllib.request
    import re

    additional_queries = []

    print("   üîç –ê–Ω–∞–ª–∏–∑ URL –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...")

    for url in competitors:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Å–∞–º–æ–≥–æ URL
            # –ü—Ä–∏–º–µ—Ä: /remont-komnat/ ‚Üí "—Ä–µ–º–æ–Ω—Ç –∫–æ–º–Ω–∞—Ç"
            path = url.split('/')[-2] if url.endswith('/') else url.split('/')[-1]
            # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            path = path.replace('.html', '').replace('.php', '')

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –ø—Ä–æ–±–µ–ª—ã
            query_from_url = path.replace('-', ' ')

            if len(query_from_url) > 3 and query_from_url not in additional_queries:
                additional_queries.append(query_from_url)
                print(f"      ‚Ä¢ {query_from_url} (–∏–∑ URL)")

        except Exception as e:
            print(f"      ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {url}: {e}")
            continue

    return additional_queries


def generate_queries(config):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ config.json"""
    print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")

    business = config['business_info']
    niche = business['niche']
    city = business['city']
    services = business['services']
    competitors = business.get('competitors', [])

    # –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    queries = []

    # 1. –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –Ω–∏—à–µ
    city_short = '—Å–ø–±' if '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥' in city.lower() else city.lower()
    queries.append(f"{niche} {city_short}")
    queries.append(f"{niche} —Ü–µ–Ω–∞ {city_short}")

    # 2. –ó–∞–ø—Ä–æ—Å—ã –ø–æ —É—Å–ª—É–≥–∞–º
    for service in services:
        queries.append(service)
        if city_short not in service.lower():
            queries.append(f"{service} {city_short}")

    # 3. –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    queries.append(f"{niche} —Å—Ç–æ–∏–º–æ—Å—Ç—å")
    queries.append(f"—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {niche}")

    # 4. –ó–∞–ø—Ä–æ—Å—ã –ø–æ —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤ (–¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞)
    if '—Ä–µ–º–æ–Ω—Ç' in niche.lower():
        room_types = ['–≤ —Ö—Ä—É—â–µ–≤–∫–µ', '–º–∞–ª–µ–Ω—å–∫–æ–π', '–≤ –ø–∞–Ω–µ–ª—å–Ω–æ–º –¥–æ–º–µ', '–¥–µ—Ç—Å–∫–æ–π', '–≥–æ—Å—Ç–∏–Ω–æ–π']
        for room_type in room_types:
            queries.append(f"{niche} {room_type}")

    # 5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    queries.append(f"–±—é–¥–∂–µ—Ç–Ω—ã–π {niche}")

    # 6. –ó–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    if competitors:
        print()
        competitor_queries = extract_queries_from_competitors(competitors)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for q in competitor_queries:
            if q not in queries:
                queries.append(q)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º queries.txt
    try:
        with open('queries.txt', 'w', encoding='utf-8') as f:
            f.write('\n'.join(queries))
        print(f"\n   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"   üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ queries.txt")
        return len(queries)
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ queries.txt: {e}")
        sys.exit(1)


def run_parser():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç...")
    print("   ‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º parser.py
        result = subprocess.run(
            ['python3', 'parser.py'],
            capture_output=True,
            text=True,
            encoding='utf-8'
        )

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.stdout:
            print(result.stdout)

        if result.returncode != 0:
            print(f"‚ùå –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:")
            if result.stderr:
                print(result.stderr)
            sys.exit(1)

        print("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
        return True

    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª parser.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        sys.exit(1)


def run_planner():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("üéØ –ó–∞–ø—É—Å–∫ AI Content Planner...")
    print("   üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π...\n")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º planner.py
        result = subprocess.run(
            ['python3', 'planner.py'],
            capture_output=True,
            text=True,
            encoding='utf-8'
        )

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.stdout:
            print(result.stdout)

        if result.returncode != 0:
            print(f"‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:")
            if result.stderr:
                print(result.stderr)
            sys.exit(1)

        print("   ‚úÖ –ü–ª–∞–Ω —Å—Ç–∞—Ç–µ–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        return True

    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª planner.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        sys.exit(1)


def display_summary(config, start_time):
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    elapsed = time.time() - start_time

    print_header("üéâ WORKFLOW –ó–ê–í–ï–†–®–Å–ù")

    print("üìÇ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("   ‚Ä¢ queries.txt              - –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    print("   ‚Ä¢ output/results.md        - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –í–æ—Ä–¥—Å—Ç–∞—Ç")
    print("   ‚Ä¢ output/results.csv       - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV")
    print("   ‚Ä¢ output/content_plan.md   - –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω —Å—Ç–∞—Ç–µ–π\n")

    business = config['business_info']
    settings = config['content_plan_settings']

    print("üìä –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print(f"   ‚Ä¢ –ù–∏—à–∞: {business['niche']}")
    print(f"   ‚Ä¢ –ì–æ—Ä–æ–¥: {business['city']}")
    print(f"   ‚Ä¢ –¶–µ–ª–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {settings['target_page']}")
    print(f"   ‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {settings['articles_per_month'] * settings['planning_period_months']}")
    print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è: {settings['planning_period_months']} –º–µ—Å—è—Ü–µ–≤")
    print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ç—Ä–∞—Ñ–∏–∫: {settings['expected_traffic_per_month']} –≤ –º–µ—Å—è—Ü\n")

    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f} —Å–µ–∫\n")

    print("üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ output/content_plan.md –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π")
    print("   2. –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Ç–µ–º—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    print("   3. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º—É –ø–ª–∞–Ω—É\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è workflow"""
    start_time = time.time()

    print_header("ü§ñ AI WORKFLOW: –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø SEO-–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø")

    print(f"üïê –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")

    # –®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_step(1, 4, "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    config = load_config()
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config['business_info']['niche']}\n")

    # –®–ê–ì 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    print_step(2, 4, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    queries_count = generate_queries(config)
    print()

    # –®–ê–ì 3: –ü–∞—Ä—Å–∏–Ω–≥ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç
    print_step(3, 4, "–ü–∞—Ä—Å–∏–Ω–≥ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç API")
    run_parser()
    print()

    # –®–ê–ì 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
    print_step(4, 4, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π")
    run_planner()
    print()

    # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    display_summary(config, start_time)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Workflow –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
