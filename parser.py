#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import sys
import urllib.request
import urllib.error
import time


# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "https://api.wordstat.yandex.net"
API_METHOD = "/v1/topRequests"

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
CATEGORY_KEYWORDS = {
    'commercial': [
        '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–ø–æ–¥ –∫–ª—é—á', '–Ω–µ–¥–æ—Ä–æ–≥–æ', '–¥–µ—à–µ–≤–æ',
        '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø—Ä–∞–π—Å', '–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∞',
        '–¥–æ—Å—Ç–∞–≤–∫–∞', '—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '–º–æ–Ω—Ç–∞–∂', '–≤—ã–∑–≤–∞—Ç—å', '—É—Å–ª—É–≥–∏'
    ],
    'informational': [
        '–∫–∞–∫', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–æ–≥–¥–∞',
        '–≥–¥–µ', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ', '—Å–ø–æ—Å–æ–±—ã',
        '–º–µ—Ç–æ–¥—ã', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '—Å–æ–≤–µ—Ç—ã', '—ç—Ç–∞–ø—ã'
    ],
    'price': [
        '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø—Ä–∞–π—Å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
        '—Ä–∞—Å—Ü–µ–Ω–∫–∏', '—Ç–∞—Ä–∏—Ñ', '—Å—Ç–æ–∏—Ç', '–∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä'
    ],
    'comparison': [
        '–æ—Ç–∑—ã–≤—ã', '—Ä–µ–π—Ç–∏–Ω–≥', '–ª—É—á—à–∏–µ', '—Ç–æ–ø', '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ',
        'vs', '–∏–ª–∏', '–∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å', '—á—Ç–æ –ª—É—á—à–µ'
    ]
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤
CATEGORY_EMOJI = {
    'commercial': 'üõí',
    'informational': 'üìö',
    'price': 'üí∞',
    'comparison': '‚öñÔ∏è',
    'local': 'üìç',
    'other': 'üîç'
}


def load_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env"""
    env_path = '.env'

    if not os.path.exists(env_path):
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω")
        sys.exit(1)

    with open(env_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()

    token = os.getenv('YANDEX_WORDSTAT_TOKEN')
    if not token or token == 'your_token_here':
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        sys.exit(1)

    return token


def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json"""
    config_path = 'config.json'

    if not os.path.exists(config_path):
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ config.json: {e}")
        sys.exit(1)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['business_info', 'parser_settings']
    for field in required_fields:
        if field not in config:
            print(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ config.json")
            sys.exit(1)

    return config


def load_queries():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ queries.txt"""
    queries_path = 'queries.txt'

    if not os.path.exists(queries_path):
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª queries.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Claude Code –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        sys.exit(1)

    with open(queries_path, 'r', encoding='utf-8') as f:
        queries = [line.strip() for line in f if line.strip()]

    if not queries:
        print("‚ùå –û—à–∏–±–∫–∞: queries.txt –ø—É—Å—Ç–æ–π!")
        sys.exit(1)

    return queries


def fetch_top_requests(token, phrase, region, devices, max_retries=3):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ—Ä–∞–∑—ã –∏–∑ API –í–æ—Ä–¥—Å—Ç–∞—Ç–∞

    Args:
        token: OAuth —Ç–æ–∫–µ–Ω
        phrase: –ü–æ–∏—Å–∫–æ–≤–∞—è —Ñ—Ä–∞–∑–∞
        region: –ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 213 –¥–ª—è –ú–æ—Å–∫–≤—ã)
        devices: –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ['desktop', 'mobile']
        max_retries: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    Returns:
        dict: JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    url = API_BASE_URL + API_METHOD

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    data = {
        "phrase": phrase,
        "regions": [region],
        "devices": devices
    }

    json_data = json.dumps(data).encode('utf-8')

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        'Content-Type': 'application/json;charset=utf-8',
        'Authorization': f'Bearer {token}'
    }

    # –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    for attempt in range(1, max_retries + 1):
        try:
            request = urllib.request.Request(
                url,
                data=json_data,
                headers=headers,
                method='POST'
            )

            with urllib.request.urlopen(request, timeout=30) as response:
                result = json.loads(response.read().decode('utf-8'))
                return result

        except urllib.error.HTTPError as e:
            error_body = e.read().decode('utf-8') if e.fp else 'No details'
            print(f"   ‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ {e.code}: {error_body}")

            if attempt < max_retries:
                wait_time = 5 * attempt
                print(f"   üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫... (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries})")
                time.sleep(wait_time)
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                return None

        except urllib.error.URLError as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e.reason}")

            if attempt < max_retries:
                wait_time = 5 * attempt
                print(f"   üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                time.sleep(wait_time)
            else:
                return None

        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None

    return None


def categorize_phrase(phrase, city_name):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ—Ä–∞–∑—ã

    Args:
        phrase: –ü–æ–∏—Å–∫–æ–≤–∞—è —Ñ—Ä–∞–∑–∞
        city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    Returns:
        tuple: (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —ç–º–æ–¥–∑–∏)
    """
    phrase_lower = phrase.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç—å
    is_local = city_name.lower() in phrase_lower

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: price > commercial > informational > comparison
    for category, keywords in CATEGORY_KEYWORDS.items():
        for keyword in keywords:
            if keyword in phrase_lower:
                emoji = CATEGORY_EMOJI.get(category, 'üîç')
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                if is_local and category != 'informational':
                    emoji = f"{CATEGORY_EMOJI['local']} {emoji}"
                return category.capitalize(), emoji

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–æ—à–ª–∞ –Ω–∏ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    emoji = CATEGORY_EMOJI['local'] if is_local else CATEGORY_EMOJI['other']
    return 'Other', emoji


def track_duplicates(all_phrases):
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ—Ä–∞–∑ –∏ —Å—á–∏—Ç–∞–µ—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏—è

    Args:
        all_phrases: –°–ª–æ–≤–∞—Ä—å {—Ñ—Ä–∞–∑–∞: [—Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è]}

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    """
    duplicates = {}

    for phrase, sources in all_phrases.items():
        if len(sources) > 1:
            duplicates[phrase] = len(sources)

    return duplicates


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç\n")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    token = load_env()
    config = load_config()
    queries = load_queries()

    business = config['business_info']
    settings = config['parser_settings']
    city = business['city']

    print(f"üìÇ –†–µ–≥–∏–æ–Ω: {city} ({business['region_code']})")
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(queries)}\n")

    # –¢–ï–°–¢: –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏...\n")

    test_phrases = [
        "–∫—É–ø–∏—Ç—å –Ω–æ—É—Ç–±—É–∫ –º–æ—Å–∫–≤–∞",
        "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –Ω–æ—É—Ç–±—É–∫",
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ—É—Ç–±—É–∫–∞",
        "–Ω–æ—É—Ç–±—É–∫ –æ—Ç–∑—ã–≤—ã",
        "–Ω–æ—É—Ç–±—É–∫ –∫—É–ø–∏—Ç—å"
    ]

    for phrase in test_phrases:
        category, emoji = categorize_phrase(phrase, city)
        print(f"{emoji} {phrase} ‚Üí {category}")


if __name__ == "__main__":
    main()
