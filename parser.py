#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import sys


def load_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env"""
    env_path = '.env'

    if not os.path.exists(env_path):
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω")
        sys.exit(1)

    with open(env_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()

    token = os.getenv('YANDEX_WORDSTAT_TOKEN')
    if not token or token == 'your_token_here':
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        sys.exit(1)

    return token


def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json"""
    config_path = 'config.json'

    if not os.path.exists(config_path):
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ config.json: {e}")
        sys.exit(1)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['business_info', 'parser_settings']
    for field in required_fields:
        if field not in config:
            print(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ config.json")
            sys.exit(1)

    return config


def load_queries():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ queries.txt"""
    queries_path = 'queries.txt'

    if not os.path.exists(queries_path):
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª queries.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Claude Code –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        sys.exit(1)

    with open(queries_path, 'r', encoding='utf-8') as f:
        queries = [line.strip() for line in f if line.strip()]

    if not queries:
        print("‚ùå –û—à–∏–±–∫–∞: queries.txt –ø—É—Å—Ç–æ–π!")
        sys.exit(1)

    return queries


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç\n")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    token = load_env()
    config = load_config()
    queries = load_queries()

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    business = config['business_info']
    settings = config['parser_settings']

    print(f"üìÇ –†–µ–≥–∏–æ–Ω: {business['city']} ({business['region_code']})")
    print(f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(settings['devices'])}")
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(queries)}")
    print(f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' if token else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n")

    # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    print("–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤:")
    for i, query in enumerate(queries, 1):
        print(f"  {i}. {query}")


if __name__ == "__main__":
    main()
