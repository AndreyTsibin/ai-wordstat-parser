#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI Content Planner –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç
"""

import json
import sys
from datetime import datetime
from collections import defaultdict


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json"""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç config.json")
        sys.exit(1)


def parse_results_md():
    """–ü–∞—Ä—Å–∏–Ω–≥ results.md –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑–∞—Ö"""
    try:
        with open('results.md', 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª results.md –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ parser.py")
        sys.exit(1)

    phrases = []
    lines = content.split('\n')

    # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ñ—Ä–∞–∑–∞–º–∏
    in_table = False
    for line in lines:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã
        if line.startswith('| ‚Ññ | –§—Ä–∞–∑–∞ | –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å | –¢–∏–ø |'):
            in_table = True
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
        if in_table and line.startswith('|---|'):
            continue

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        if in_table and line.startswith('|'):
            parts = [p.strip() for p in line.split('|')[1:-1]]
            if len(parts) >= 4 and parts[0].isdigit():
                phrase_text = parts[1]
                # –£–±–∏—Ä–∞–µ–º –ø–æ–º–µ—Ç–∫—É –æ –¥—É–±–ª–∏–∫–∞—Ç–µ
                if '*(–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤' in phrase_text:
                    phrase_text = phrase_text.split('*(–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è')[0].strip()

                try:
                    frequency = int(parts[2].replace(',', '').replace(' ', ''))
                except ValueError:
                    continue

                category_raw = parts[3]
                category = extract_category(category_raw)

                phrases.append({
                    'phrase': phrase_text,
                    'frequency': frequency,
                    'category': category
                })

        # –ö–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
        if in_table and line.strip() == '---':
            in_table = False

    return phrases


def extract_category(category_str):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏"""
    category_map = {
        'üõí': 'commercial',
        'üí∞': 'price',
        'üìö': 'informational',
        '‚öñÔ∏è': 'comparison',
        'üìç': 'local',
        'üîç': 'other'
    }

    for emoji, cat in category_map.items():
        if emoji in category_str:
            return cat
    return 'other'


def extract_root_words(phrase):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ—Ä–∞–∑—ã –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏

    Args:
        phrase: –§—Ä–∞–∑–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    Returns:
        set: –ù–∞–±–æ—Ä –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
    """
    # –°—Ç–æ–ø-—Å–ª–æ–≤–∞ (–ø—Ä–µ–¥–ª–æ–≥–∏, —Å–æ—é–∑—ã –∏ —Ç.–¥.)
    stop_words = {
        '–≤', '–Ω–∞', '–∏', '—Å', '–ø–æ–¥', '–¥–ª—è', '–ø–æ', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ',
        '—Å–ø–±', '—Å–∞–Ω–∫—Ç', '–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–º–æ—Å–∫–≤–∞', '–º—Å–∫'
    }

    words = phrase.lower().split()
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
    meaningful = {w for w in words if len(w) > 2 and w not in stop_words}

    return meaningful


def find_semantic_cluster(phrase, phrase_data, existing_clusters, min_common_words=2):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è —Ñ—Ä–∞–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —Å–ª–æ–≤

    Args:
        phrase: –§—Ä–∞–∑–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        phrase_data: –î–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã (—á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å, –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        existing_clusters: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
        min_common_words: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —Å–ª–æ–≤

    Returns:
        str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ None
    """
    phrase_words = extract_root_words(phrase)

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º
    special_patterns = {
        '–ø–æ–¥ –∫–ª—é—á': {'–ø–æ–¥', '–∫–ª—é—á'},
        '—Ü–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å': {'—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ', '—Å—Ç–æ–∏—Ç', '–ø—Ä–∞–π—Å'},
        '—Ö—Ä—É—â–µ–≤–∫–∞': {'—Ö—Ä—É—â–µ–≤–∫'},
        '–º–∞–ª–µ–Ω—å–∫–∞—è': {'–º–∞–ª–µ–Ω—å–∫', '–Ω–µ–±–æ–ª—å—à'},
        '–¥–µ—Ç—Å–∫–∞—è': {'–¥–µ—Ç—Å–∫'},
        '–≥–æ—Å—Ç–∏–Ω–∞—è': {'–≥–æ—Å—Ç–∏–Ω'},
        '–ø–∞–Ω–µ–ª—å–Ω—ã–π –¥–æ–º': {'–ø–∞–Ω–µ–ª—å–Ω'}
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for cluster_name, pattern_words in special_patterns.items():
        if any(word in phrase.lower() for word in pattern_words):
            return cluster_name

    # –ò—â–µ–º –∫–ª–∞—Å—Ç–µ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Å–ª–æ–≤
    best_match = None
    max_common = 0

    for cluster_name, cluster_phrases in existing_clusters.items():
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ñ—Ä–∞–∑—É –∫–ª–∞—Å—Ç–µ—Ä–∞ –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω
        if cluster_phrases:
            reference_phrase = cluster_phrases[0]['phrase']
            reference_words = extract_root_words(reference_phrase)
            common_words = phrase_words & reference_words

            if len(common_words) >= min_common_words and len(common_words) > max_common:
                max_common = len(common_words)
                best_match = cluster_name

    return best_match


def cluster_phrases(phrases, config):
    """–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ñ—Ä–∞–∑ –ø–æ —Ç–µ–º–∞–º —Å—Ç–∞—Ç–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"""
    settings = config['content_plan_settings']
    min_freq = settings.get('min_frequency_threshold', 50)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ—Ä–∞–∑—ã –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
    filtered = [p for p in phrases if p['frequency'] >= min_freq]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ (—Å–∞–º—ã–µ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã)
    filtered.sort(key=lambda x: x['frequency'], reverse=True)

    # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    semantic_clusters = defaultdict(list)

    for phrase_data in filtered:
        phrase = phrase_data['phrase']

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä
        cluster_name = find_semantic_cluster(phrase, phrase_data, semantic_clusters)

        if cluster_name:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä
            semantic_clusters[cluster_name].append(phrase_data)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª–∞–≤–Ω—ã—Ö —Å–ª–æ–≤ —Ñ—Ä–∞–∑—ã
            root_words = extract_root_words(phrase)
            if root_words:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1-2 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
                sorted_words = sorted(root_words, key=len, reverse=True)
                cluster_name = ' '.join(sorted_words[:2])
            else:
                cluster_name = phrase[:30]  # Fallback

            semantic_clusters[cluster_name].append(phrase_data)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    category_clusters = defaultdict(list)
    for phrase_data in filtered:
        category_clusters[phrase_data['category']].append(phrase_data)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
    for cluster in semantic_clusters:
        semantic_clusters[cluster].sort(key=lambda x: x['frequency'], reverse=True)

    for category in category_clusters:
        category_clusters[category].sort(key=lambda x: x['frequency'], reverse=True)

    return category_clusters


def calculate_priority(frequency):
    """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏"""
    if frequency >= 500:
        return "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ", "–í—ã—Å–æ–∫–∏–π"
    elif frequency >= 200:
        return "‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ", "–°—Ä–µ–¥–Ω–∏–π"
    elif frequency >= 100:
        return "‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ", "–°—Ä–µ–¥–Ω–∏–π"
    elif frequency >= 50:
        return "‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ", "–ù–∏–∑–∫–∏–π"
    else:
        return "‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ", "–ù–∏–∑–∫–∏–π"


def decline_word_prepositional(word):
    """
    –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ (–æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "–æ —á—ë–º? –≥–¥–µ?")

    Args:
        word: –°–ª–æ–≤–æ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è

    Returns:
        str: –°–ª–æ–≤–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–Ω–æ–º –ø–∞–¥–µ–∂–µ
    """
    word_lower = word.lower()

    # –°–ª–æ–≤–∞—Ä—å –≥–æ—Ç–æ–≤—ã—Ö —Ñ–æ—Ä–º –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –∏ —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤
    prepositional_dict = {
        # –ì–æ—Ä–æ–¥–∞
        '–º–æ—Å–∫–≤–∞': '–ú–æ—Å–∫–≤–µ',
        '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ',
        '–ø–µ—Ç–µ—Ä–±—É—Ä–≥': '–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ',
        '–∫–∞–∑–∞–Ω—å': '–ö–∞–∑–∞–Ω–∏',
        '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ',
        '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ',
        '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': '–ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ',
        '—Å–∞–º–∞—Ä–∞': '–°–∞–º–∞—Ä–µ',
        '–æ–º—Å–∫': '–û–º—Å–∫–µ',
        '—á–µ–ª—è–±–∏–Ω—Å–∫': '–ß–µ–ª—è–±–∏–Ω—Å–∫–µ',
        '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': '–†–æ—Å—Ç–æ–≤–µ-–Ω–∞-–î–æ–Ω—É',
        '—É—Ñ–∞': '–£—Ñ–µ',
        '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–µ',
        '–≤–æ—Ä–æ–Ω–µ–∂': '–í–æ—Ä–æ–Ω–µ–∂–µ',
        '–ø–µ—Ä–º—å': '–ü–µ—Ä–º–∏',
        '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': '–í–æ–ª–≥–æ–≥—Ä–∞–¥–µ',
        '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ',
        '—Å–∞—Ä–∞—Ç–æ–≤': '–°–∞—Ä–∞—Ç–æ–≤–µ',
        '—Ç—é–º–µ–Ω—å': '–¢—é–º–µ–Ω–∏',
        '—Ç–æ–ª—å—è—Ç—Ç–∏': '–¢–æ–ª—å—è—Ç—Ç–∏',
        '–∏–∂–µ–≤—Å–∫': '–ò–∂–µ–≤—Å–∫–µ',
        '–±–∞—Ä–Ω–∞—É–ª': '–ë–∞—Ä–Ω–∞—É–ª–µ',
        '—É–ª—å—è–Ω–æ–≤—Å–∫': '–£–ª—å—è–Ω–æ–≤—Å–∫–µ',
        '–∏—Ä–∫—É—Ç—Å–∫': '–ò—Ä–∫—É—Ç—Å–∫–µ',
        '—Ö–∞–±–∞—Ä–æ–≤—Å–∫': '–•–∞–±–∞—Ä–æ–≤—Å–∫–µ',
        '—è—Ä–æ—Å–ª–∞–≤–ª—å': '–Ø—Ä–æ—Å–ª–∞–≤–ª–µ',
        '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ',
        '–º–∞—Ö–∞—á–∫–∞–ª–∞': '–ú–∞—Ö–∞—á–∫–∞–ª–µ',
        '—Ç–æ–º—Å–∫': '–¢–æ–º—Å–∫–µ',
        '–æ—Ä–µ–Ω–±—É—Ä–≥': '–û—Ä–µ–Ω–±—É—Ä–≥–µ',
        '–∫–µ–º–µ—Ä–æ–≤–æ': '–ö–µ–º–µ—Ä–æ–≤–æ',
        '–Ω–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫': '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–µ',
        '—Ä—è–∑–∞–Ω—å': '–†—è–∑–∞–Ω–∏',
        '–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å': '–ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏',
        '–Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ —á–µ–ª–Ω—ã': '–ù–∞–±–µ—Ä–µ–∂–Ω—ã—Ö –ß–µ–ª–Ω–∞—Ö',
        '–ø–µ–Ω–∑–∞': '–ü–µ–Ω–∑–µ',
        '–∫–∏—Ä–æ–≤': '–ö–∏—Ä–æ–≤–µ',
        '–ª–∏–ø–µ—Ü–∫': '–õ–∏–ø–µ—Ü–∫–µ',
        '—á–µ–±–æ–∫—Å–∞—Ä—ã': '–ß–µ–±–æ–∫—Å–∞—Ä–∞—Ö',
        '–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–µ',
        '—Ç—É–ª–∞': '–¢—É–ª–µ',
        '—Å–æ—á–∏': '–°–æ—á–∏',
        '—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å': '–°—Ç–∞–≤—Ä–æ–ø–æ–ª–µ',
        '–∫—É—Ä—Å–∫': '–ö—É—Ä—Å–∫–µ',
        '—É–ª–∞–Ω-—É–¥—ç': '–£–ª–∞–Ω-–£–¥—ç',
        '—Ç–≤–µ—Ä—å': '–¢–≤–µ—Ä–∏',
        '–º–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫': '–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫–µ',
        '–∏–≤–∞–Ω–æ–≤–æ': '–ò–≤–∞–Ω–æ–≤–æ',
        '–±—Ä—è–Ω—Å–∫': '–ë—Ä—è–Ω—Å–∫–µ',
        '–±–µ–ª–≥–æ—Ä–æ–¥': '–ë–µ–ª–≥–æ—Ä–æ–¥–µ',
        '—Å—É—Ä–≥—É—Ç': '–°—É—Ä–≥—É—Ç–µ',
        '–≤–ª–∞–¥–∏–º–∏—Ä': '–í–ª–∞–¥–∏–º–∏—Ä–µ',
        '–Ω–∏–∂–Ω–∏–π —Ç–∞–≥–∏–ª': '–ù–∏–∂–Ω–µ–º –¢–∞–≥–∏–ª–µ',
        '–∞—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫': '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–µ',
        '—á–∏—Ç–∞': '–ß–∏—Ç–µ',
        '–∫–∞–ª—É–≥–∞': '–ö–∞–ª—É–≥–µ',
        '—Å–º–æ–ª–µ–Ω—Å–∫': '–°–º–æ–ª–µ–Ω—Å–∫–µ',
        '–≤–æ–ª–∂—Å–∫–∏–π': '–í–æ–ª–∂—Å–∫–æ–º',
        '—è–∫—É—Ç—Å–∫': '–Ø–∫—É—Ç—Å–∫–µ',
        '—Å–∞—Ä–∞–Ω—Å–∫': '–°–∞—Ä–∞–Ω—Å–∫–µ',
        '—á–µ—Ä–µ–ø–æ–≤–µ—Ü': '–ß–µ—Ä–µ–ø–æ–≤—Ü–µ',
        '–≤–æ–ª–æ–≥–¥–∞': '–í–æ–ª–æ–≥–¥–µ',
        '–≤–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑': '–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑–µ',
        '–≥—Ä–æ–∑–Ω—ã–π': '–ì—Ä–æ–∑–Ω–æ–º',
        '–º—É—Ä–º–∞–Ω—Å–∫': '–ú—É—Ä–º–∞–Ω—Å–∫–µ',
        '—Ç–∞–º–±–æ–≤': '–¢–∞–º–±–æ–≤–µ',
        '–ø–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫': '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–µ',
        '–∫–æ—Å—Ç—Ä–æ–º–∞': '–ö–æ—Å—Ç—Ä–æ–º–µ',
        '–æ—Ä–µ–ª': '–û—Ä–ª–µ',
        '–Ω–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫': '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–µ',
        '–π–æ—à–∫–∞—Ä-–æ–ª–∞': '–ô–æ—à–∫–∞—Ä-–û–ª–µ',

        # –°—Ç—Ä–∞–Ω—ã
        '—Ä–æ—Å—Å–∏—è': '–†–æ—Å—Å–∏–∏',
        '—É–∫—Ä–∞–∏–Ω–∞': '–£–∫—Ä–∞–∏–Ω–µ',
        '–±–µ–ª–∞—Ä—É—Å—å': '–ë–µ–ª–∞—Ä—É—Å–∏',
        '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä—å
    if word_lower in prepositional_dict:
        return prepositional_dict[word_lower]

    # –ü—Ä–∞–≤–∏–ª–∞ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö —Å–ª–æ–≤
    # –ì–æ—Ä–æ–¥ –Ω–∞ -–±—É—Ä–≥ ‚Üí -–±—É—Ä–≥–µ
    if word_lower.endswith('–±—É—Ä–≥'):
        return word[:-1] + '–µ'

    # –ì–æ—Ä–æ–¥ –Ω–∞ -—Å–∫ ‚Üí -—Å–∫–µ
    if word_lower.endswith('—Å–∫'):
        return word + '–µ'

    # –ì–æ—Ä–æ–¥ –Ω–∞ -–≥—Ä–∞–¥ ‚Üí -–≥—Ä–∞–¥–µ
    if word_lower.endswith('–≥—Ä–∞–¥'):
        return word + '–µ'

    # –°–æ—Å—Ç–∞–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ —Å–∫–ª–æ–Ω—è–µ–º)
    if '-' in word:
        parts = word.split('-')
        last_declined = decline_word_prepositional(parts[-1])
        return '-'.join(parts[:-1] + [last_declined])

    # –ì–æ—Ä–æ–¥ –Ω–∞ -–∞/-—è (–∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥) ‚Üí -–µ
    if word_lower.endswith(('–≤–∞', '–Ω–∞', '–∫–∞', '–≥–∞', '—Ö–∞', '—á–∞', '—â–∞', '—Ä–∞', '–ª–∞', '–º–∞', '–ø–∞', '—Ç–∞', '–¥–∞')):
        return word[:-1] + '–µ'

    if word_lower.endswith('—è'):
        return word[:-1] + '–µ'

    # –ì–æ—Ä–æ–¥ –Ω–∞ -—å (–∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥) ‚Üí -–∏
    if word_lower.endswith('—å'):
        return word[:-1] + '–∏'

    # –ì–æ—Ä–æ–¥ –Ω–∞ -–æ/-–µ (—Å—Ä–µ–¥–Ω–∏–π —Ä–æ–¥) ‚Üí –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if word_lower.endswith(('–≤–æ', '–∫–æ', '–Ω–æ', '—Ä–æ', '–ª–æ', '—Ç–æ', '–µ')):
        return word

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º '–µ' (–º—É–∂—Å–∫–æ–π —Ä–æ–¥)
    return word + '–µ'


def capitalize_phrase(phrase):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–∞–∑—ã (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å)

    Args:
        phrase: –§—Ä–∞–∑–∞ –¥–ª—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        str: –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
    """
    if not phrase:
        return phrase
    return phrase[0].upper() + phrase[1:]


def generate_article_title(phrase, category, config, template_index=0):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    city = config['business_info']['city']
    phrase_lower = phrase.lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    if '-' in city:
        # –î–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
        city_full = city
        city_abbr = ''.join([word[0].upper() for word in city.split('-')]) + '–±'  # –°–ü–±, –ù–ù –∏ —Ç.–¥.
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        city_full = city
        city_abbr = city

    # –°–∫–ª–æ–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ (–≥–¥–µ? –≤ —á—ë–º?)
    city_prepositional = decline_word_prepositional(city_full)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–æ—Ä–æ–¥ –≤ —Ñ—Ä–∞–∑–µ
    has_city_full = city_full.lower() in phrase_lower
    has_city_abbr = city_abbr.lower() in phrase_lower
    has_spb = '—Å–ø–±' in phrase_lower  # –¥–ª—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞

    # –®–∞–±–ª–æ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    templates = {
        'commercial': [
            f"{capitalize_phrase(phrase)}: —Ü–µ–Ω—ã 2025, —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç",
            f"{capitalize_phrase(phrase)} –≤ {city_prepositional}: –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è" if not has_city_full else f"{capitalize_phrase(phrase)}: –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
            f"{capitalize_phrase(phrase)} {city_abbr}: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ" if not (has_city_abbr or has_spb) else f"{capitalize_phrase(phrase)}: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        ],
        'price': [
            f"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {phrase}" if not phrase_lower.startswith('—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç') else capitalize_phrase(phrase),
            f"{capitalize_phrase(phrase)}: –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã 2025 –≤ {city_prepositional}" if not has_city_full else f"{capitalize_phrase(phrase)}: –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã 2025",
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å {phrase} –≤ {city_prepositional}" if not phrase_lower.startswith('—Å—Ç–æ–∏–º–æ—Å—Ç—å') and not has_city_full else capitalize_phrase(phrase)
        ],
        'informational': [
            f"{capitalize_phrase(phrase)}: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤ {city_prepositional}" if not has_city_full else f"{capitalize_phrase(phrase)}: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
            f"–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å: {phrase}",
            f"{capitalize_phrase(phrase)}: —Å–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
        ],
        'comparison': [
            f"{capitalize_phrase(phrase)}: –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞—Ç—å –≤ {city_prepositional}" if not has_city_full else f"{capitalize_phrase(phrase)}: –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞—Ç—å",
            f"{capitalize_phrase(phrase)}: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –æ—Ç–∑—ã–≤—ã"
        ],
        'other': [
            f"{capitalize_phrase(phrase)} –≤ {city_prepositional}" if not has_city_full else capitalize_phrase(phrase),
            f"{capitalize_phrase(phrase)}: –≤—Å—ë —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å"
        ]
    }

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_templates = templates.get(category, templates['other'])

    # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    template_idx = template_index % len(category_templates)
    return category_templates[template_idx]


def generate_content_plan(clusters, config):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π"""
    business = config['business_info']
    settings = config['content_plan_settings']

    plan = {
        'meta': {
            'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
            'site': business['site'],
            'niche': business['niche'],
            'city': business['city'],
            'target_page': settings['target_page'],
            'total_articles': 0,
            'planning_period_months': settings['planning_period_months'],
            'expected_traffic': settings['expected_traffic_per_month'],
            'conversion_rate': settings['conversion_rate_percent']
        },
        'blocks': []
    }

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Å—Ç–∞—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    block_configs = settings['article_blocks']
    article_counter = 1

    for category, cat_config in block_configs.items():
        if category not in clusters or len(clusters[category]) == 0:
            continue

        block_phrases = clusters[category]
        block = {
            'category': category,
            'priority': cat_config['priority'],
            'articles_count': len(block_phrases),
            'articles': []
        }

        for idx, phrase_data in enumerate(block_phrases):
            stars, priority_text = calculate_priority(phrase_data['frequency'])

            article = {
                'number': article_counter,
                'title': generate_article_title(phrase_data['phrase'], phrase_data['category'], config, idx),
                'key_phrase': phrase_data['phrase'],
                'frequency': phrase_data['frequency'],
                'priority': priority_text,
                'stars': stars
            }

            block['articles'].append(article)
            article_counter += 1

        plan['blocks'].append(block)
        plan['meta']['total_articles'] += len(block_phrases)

    return plan


def format_markdown_plan(plan, config):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π –≤ Markdown"""
    meta = plan['meta']
    business = config['business_info']
    settings = config['content_plan_settings']

    md = f"""# –ü–õ–ê–ù –°–¢–ê–¢–ï–ô: {business['niche'].upper()} {business['city'].upper()}

## üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

**–¶–µ–ª–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:** `{meta['target_page']}`
**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π:** {meta['total_articles']}
**–ü–µ—Ä–∏–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è:** {meta['planning_period_months']} –º–µ—Å—è—Ü–µ–≤ ({settings['articles_per_month']} —Å—Ç–∞—Ç–µ–π –≤ –º–µ—Å—è—Ü)
**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {meta['expected_traffic']} –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤/–º–µ—Å—è—Ü
**–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—è–≤–∫–∏:** {meta['conversion_rate']}%

---

"""

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Å—Ç–∞—Ç–µ–π
    for idx, block in enumerate(plan['blocks'], 1):
        category_names = {
            'commercial': '–ö–û–ú–ú–ï–†–ß–ï–°–ö–ò–ï –°–¢–ê–¢–¨–ò',
            'price': '–¶–ï–ù–û–í–´–ï –°–¢–ê–¢–¨–ò',
            'informational': '–ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –°–¢–ê–¢–¨–ò',
            'comparison': '–°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ê–¢–¨–ò',
            'other': '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ê–¢–¨–ò'
        }

        total_traffic = sum(a['frequency'] for a in block['articles'])

        md += f"""## üéØ –ë–õ–û–ö {idx}: {category_names.get(block['category'], block['category'].upper())} ({block['articles_count']} —Å—Ç–∞—Ç–µ–π)
*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {block['priority'].upper()} | –¶–µ–ª–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫: {total_traffic:,}+ –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å*

| ‚Ññ | –¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏ | –ö–ª—é—á–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å | –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç |
|---|-------------|-----------------|-------------|-----------|
"""

        for article in block['articles']:
            md += f"| {article['number']} | **{article['title']}** | {article['key_phrase']} ({article['frequency']}) | {article['priority']} | {article['stars']} |\n"

        md += "\n---\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω
    md += generate_calendar_plan(plan, settings)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    md += generate_target_metrics(meta, settings)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    md += generate_content_recommendations(business, settings)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏
    md += generate_crosslinking_strategy(settings)

    return md


def generate_calendar_plan(plan, settings):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    articles_per_month = settings['articles_per_month']
    total = plan['meta']['total_articles']

    md = """## üìÖ –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù –ü–£–ë–õ–ò–ö–ê–¶–ò–ô

"""

    month = 1
    article_start = 1

    for block in plan['blocks']:
        articles_in_block = len(block['articles'])
        months_needed = (articles_in_block + articles_per_month - 1) // articles_per_month

        md += f"### **–ú–ï–°–Ø–¶ {month}-{month + months_needed - 1}: {block['category'].capitalize()} –±–ª–æ–∫ ({articles_in_block} —Å—Ç–∞—Ç–µ–π)**\n"
        md += f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {block['priority']}\n"
        md += f"- –°—Ç–∞—Ç—å–∏ {article_start}-{article_start + articles_in_block - 1}\n\n"

        month += months_needed
        article_start += articles_in_block

    md += "\n---\n\n"
    return md


def generate_target_metrics(meta, settings):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
    md = """## üéØ –¶–ï–õ–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò

### **–ü–æ—Å–ª–µ 3 –º–µ—Å—è—Ü–µ–≤:**
- **–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫:** 30-40% –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ
- **–ü–æ–∑–∏—Ü–∏–∏ –≤ –¢–û–ü-10:** 40% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
- **–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—è–≤–∫–∏:** 1.5-2%

### **–ü–æ—Å–ª–µ 6 –º–µ—Å—è—Ü–µ–≤:**
- **–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫:** """ + meta['expected_traffic'] + """ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π/–º–µ—Å—è—Ü
- **–ü–æ–∑–∏—Ü–∏–∏ –≤ –¢–û–ü-10:** """ + str(settings['target_top_positions']) + """+ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
- **–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—è–≤–∫–∏:** """ + meta['conversion_rate'] + """%

---

"""
    return md


def generate_content_recommendations(business, settings):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    utp_list = '\n'.join([f"‚úÖ **{utp}**" for utp in business['utp']])

    md = f"""## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–û–ù–¢–ï–ù–¢–£

### **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏:**
‚úÖ **8-12 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫** –Ω–∞ —Å–º–µ–∂–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
{utp_list}
‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã:** {settings['phone']}
‚úÖ **–¶–µ–Ω—ã:** {settings['price_per_sqm']}
‚úÖ **–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è:** {business['city']}, —Ä–∞–π–æ–Ω—ã

### **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–µ–π:**
- **–û–±—ä–µ–º:** {settings['article_length_words']} –∑–Ω–∞–∫–æ–≤
- **H2-H3:** 4-6 –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- **–ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é:** –∫–∞–∂–¥—ã–µ 500-700 —Å–ª–æ–≤
- **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:** —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç, —Å—Ö–µ–º—ã, –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞

### **SEO-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
- **–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π:** 1-2%
- **LSI-—Å–ª–æ–≤–∞:** –º–∞—Å—Ç–µ—Ä, –±—Ä–∏–≥–∞–¥–∞, —Å–º–µ—Ç–∞, –≥–∞—Ä–∞–Ω—Ç–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- **Title:** –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤ —Å –∫–ª—é—á–æ–º
- **Description:** 150-160 —Å–∏–º–≤–æ–ª–æ–≤ —Å –£–¢–ü

---

"""
    return md


def generate_crosslinking_strategy(settings):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏"""
    links = '\n'.join([f"{i+1}. `{link}`" for i, link in enumerate(settings['internal_links'])])
    anchors = '\n'.join([f'- "{anchor}"' for anchor in settings['anchor_texts']])

    md = f"""## üîó –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–ï–†–ï–õ–ò–ù–ö–û–í–ö–ò

### **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–µ:**
{links}

### **–ê–Ω–∫–æ—Ä—ã –¥–ª—è —Å—Å—ã–ª–æ–∫:**
{anchors}

---

**–ò–¢–û–ì–û: –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ –¢–û–ü-10**

*–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫ –∏ –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è*
"""
    return md


def save_content_plan(markdown_content):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π –≤ —Ñ–∞–π–ª"""
    output_file = 'content_plan.md'
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        print(f"‚úÖ –ü–ª–∞–Ω —Å—Ç–∞—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_file}")
        return output_file
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ AI Content Planner\n")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config = load_config()

    # –ü–∞—Ä—Å–∏–Ω–≥ results.md
    print("üìä –ê–Ω–∞–ª–∏–∑ results.md...")
    phrases = parse_results_md()
    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(phrases)} —Ñ—Ä–∞–∑")

    # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ñ—Ä–∞–∑
    print("üîç –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º...")
    clusters = cluster_phrases(phrases, config)
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(clusters)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π
    print("‚úçÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π...")
    plan = generate_content_plan(clusters, config)
    print(f"   ‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {plan['meta']['total_articles']} —Å—Ç–∞—Ç–µ–π")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Markdown
    print("üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Markdown...")
    markdown = format_markdown_plan(plan, config)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞...")
    save_content_plan(markdown)

    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ü–ª–∞–Ω —Å—Ç–∞—Ç–µ–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")


if __name__ == '__main__':
    main()
